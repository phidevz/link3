---
import Link from "../components/Link.astro";
import Footer from "../components/Footer.astro";

import { parse } from "twemoji-parser";
import { configuration } from "../config";

function generateRobots() {
  if (configuration.searchEngines === "no-restrictions") {
    return "all";
  }

  if (configuration.searchEngines === "restrict-all") {
    return "none";
  }

  const config = configuration.searchEngines || {
    indexSite: true,
    followLinks: true,
  };

  const tags = [
    "max-image-preview:large",
    "max-snippet:-1",
    "max-video-preview:-1",
  ];

  if (config.indexSite === true) {
    tags.push("index");
  } else if (config.indexSite === false) {
    tags.push("noindex");
  }

  if (config.followLinks === true) {
    tags.push("follow");
  } else if (config.followLinks === false) {
    tags.push("nofollow");
  }

  if (config.archive === false) {
    tags.push("noarchive");
  }

  if (config.indexIfEmbedded === true) {
    tags.push("indexifembedded");
  }

  if (config.showSnippet === false) {
    tags.push("nosnippet");
  }

  return tags.join(", ");
}

async function parseEmojis(input: string | undefined) {
  if (!input) {
    return undefined;
  }

  const parsedDownloaded = await Promise.all(
    parse(input, { assetType: "svg", buildUrl: (codepoints, assetType) => `https://twemoji.maxcdn.com/v/14.0.2/svg/${codepoints}.svg` }).map((emoji) => {
      return fetch(emoji.url)
        .then((svg) => svg.text())
        .then((svg) => ({
          ...emoji,
          svg: `<span class="inline-flex [height:1em] ml-[0.8em] mr-[0.4em]">${svg}</span>`,
        }));
    })
  );

  const html = parsedDownloaded.reduce(
    ({ text, lastIndex }, emoji) => {
      const textFromLastEmojiToThis = input.substring(
        lastIndex,
        emoji.indices[0]
      );

      return {
        text: `${text}${textFromLastEmojiToThis}${emoji.svg}`,
        lastIndex: emoji.indices[1],
      };
    },
    { text: "", lastIndex: 0 }
  );

  return html.text + input.substring(html.lastIndex);
}

const robots = generateRobots();
const site = Astro.site!;
const baseUrl = new URL(
  import.meta.env.BASE_URL,
  import.meta.env.DEV === true ? Astro.url : site
);
const locale = configuration.locale;
const language = locale.substring(0, 2);
const title =
  typeof configuration.title === "string"
    ? configuration.title
    : `${configuration.title.firstName} ${configuration.title.lastName}`;
const siteTitle = title + " | Link3";
const tagline = configuration.tagline || siteTitle;
const imageUrl =
  configuration.avatarUrl || new URL("/avatar.png", baseUrl).toString();

const parsedTagline = await parseEmojis(configuration.tagline);
const showFooter = configuration.footer || "show";
---

<!DOCTYPE html>
<html
  lang={language}
  class="bg-zinc-100 font-sans text-zinc-900 dark:bg-zinc-800 dark:text-zinc-50"
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <title>{siteTitle}</title>
    <meta property="og:title" content={siteTitle} />

    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content={robots} />

    <meta property="og:locale" content={locale} />
    <meta property="og:type" content="profile" />
    <meta property="og:url" content={site} />

    {
      typeof configuration.title === "object" && (
        <>
          <meta
            property="og:profile:first_name"
            content={configuration.title.firstName}
          />
          <meta
            property="og:profile:last_name"
            content={configuration.title.lastName}
          />
        </>
      )
    }
    {
      configuration.username && (
        <meta property="og:profile:username" content={configuration.username} />
      )
    }

    <meta name="description" content={tagline} />
    <meta property="og:description" content={tagline} />
    <meta name="twitter:description" content={tagline} />

    <meta property="og:image" content={imageUrl} />
    <meta property="og:image:alt" content={title} />

    <meta name="twitter:card" content="summary_large_image" />
  </head>
  <body>
    <header class="mx-auto max-w-7xl py-16 px-4 sm:py-10 sm:px-6 lg:px-8">
      <div class="text-center">
        <img
          class="mx-auto h-44 w-44 rounded-full xl:h-56 xl:w-56"
          src={imageUrl}
          alt={title}
        />

        <p
          class="mt-5 text-4xl font-bold tracking-tight text-blue-700 dark:text-blue-500 sm:text-5xl lg:text-6xl"
        >
          {title}
        </p>

        {
          configuration.username && (
            <h2 class="mt-2 text-xl font-semibold opacity-80">
              @{configuration.username}
            </h2>
          )
        }

        {
          parsedTagline && (
            <h2 class="mt-5 flex items-center justify-center text-xl font-semibold">
              <Fragment set:html={parsedTagline} />
            </h2>
          )
        }
      </div>
    </header>

    <main class="mx-auto max-w-lg px-6 sm:px-0">
      <div class="mx-auto max-w-3xl">
        <div class="flex flex-col gap-4">
          {configuration.links.map((link) => <Link link={link} />)}
        </div>
      </div>
    </main>

    {showFooter !== "hide" && <Footer title={title} options={showFooter} />}
  </body>
</html>
